<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hmrz.mybatis.vendorCost">
	
	<select id="getTaskVendor" parameterType="TaskVendorSearch" resultType="HashMap" >
	    SELECT 
	    s.vendor_id,
	    <if test="type!='share_wx'">
	    s.task_type_id,
	    </if>
	    s.task_id,
	    s.name as task_name,
	    s.salary,
	    s.plat_fee,
	    s.execute_times,
	    cv.balance
		FROM
			s_${type} s,c_vendor cv
		WHERE
			s.vendor_id = cv.vendor_id and s.is_del = 0 
			and cv.vendor_id = #{vendor_id}
			and s.task_id = #{task_id}
	</select>
	
	<select id="getTaskVendorCost" parameterType="TaskVendorSearch" resultType="HashMap" >
	    SELECT 
	    cvc.task_imprest,
		cvc.plat_imprest,
		cvc.reality_task_consume,
		cvc.reality_plat_consume
		FROM
			c_vendor_cost cvc
		WHERE
			cvc.task_biz = #{task_biz}
			and cvc.vendor_id = #{vendor_id}
			and cvc.task_id = #{task_id}
	</select>
	
	<insert id="addVendorCost" parameterType="VendorCostBean" useGeneratedKeys="true" keyProperty="cost_id">
		INSERT INTO c_vendor_cost (
			customer_id,
			vendor_id,
			task_biz,
			<if test="task_biz!=2">task_type_id,</if>
			task_id,
			task_name,
			original_balance,
			task_imprest,
			plat_imprest,
			balance
		)
  		VALUES(
  			#{customer_id},
  			#{vendor_id},
  			#{task_biz},
  			<if test="task_biz!=2">#{task_type_id},</if>
  			#{task_id},
  			#{task_name},
  			#{original_balance},
  			#{task_imprest},
  			#{plat_imprest},
  			#{balance}
  		)
	</insert>
	
	<update id="updateVendorBalance" parameterType="HashMap">
	    UPDATE c_vendor
	    SET balance = balance + #{consume}
	    WHERE vendor_id = #{vendor_id}
	</update>
	
	<update id="updateVendorCost" parameterType="HashMap">
	    <if test="consume_type !=null and consume_type !='' ">
	        <choose>  
		        <when test='consume_type=="1"'>  
		              <if test="type !=null and type !='' ">
					    <choose>  
					        <when test="type=='share_wx'">  
					            UPDATE c_vendor_cost cvcc, (select 
									cvc.cost_id,
									t.salary,
									t.plat_fee,
								    t.execute_times,
								  	cv.balance,
								  	COUNT(exe.execute_id) as count
									from c_vendor_cost cvc ,c_vendor cv ,s_share_wx t ,s_share_wx_data exe
									where 
									cvc.vendor_id = cv.vendor_id 
									and cvc.task_id = t.task_id
									and t.task_id = exe.task_id
									and exe.click_salary > 0
									and cvc.task_id =#{task_id}
									and cvc.task_biz = #{task_biz}
									GROUP BY cvc.task_id) TT
								SET cvcc.reality_task_consume = TT.salary * TT.count,
								    cvcc.reality_plat_consume = TT.plat_fee * TT.count,
								    cvcc.after_balance = TT.balance + TT.salary * (TT.execute_times-TT.count) +  TT.plat_fee * (TT.execute_times - TT.count),
								    cvcc.type = #{consume_type},account_time = NOW()
								WHERE cvcc.cost_id = TT.cost_id and cvcc.account_time is null
					        </when>  
				        	<otherwise>
				        	    UPDATE c_vendor_cost cvcc, (select 
									cvc.cost_id,
									t.salary,
									t.plat_fee,
								  	t.execute_times,
								  	cv.balance,
								  	COUNT(exe.execute_id) as count
									from c_vendor_cost cvc ,c_vendor cv ,s_${type} t ,s_${type}_execute exe
									where 
									cvc.vendor_id = cv.vendor_id 
									and cvc.task_id = t.task_id
									and t.task_id = exe.task_id
									and exe.`status` = 4
									and cvc.task_id = #{task_id}
									and cvc.task_biz = #{task_biz}
									GROUP BY cvc.task_id) TT
								SET cvcc.reality_task_consume = TT.salary * TT.count,
								    cvcc.reality_plat_consume = ROUND(TT.plat_fee * TT.count,2),
								    cvcc.after_balance = TT.balance + TT.salary * (TT.execute_times-TT.count) +  ROUND(TT.plat_fee * (TT.execute_times - TT.count),2),
								    cvcc.type = #{consume_type},account_time = NOW()
								WHERE cvcc.cost_id = TT.cost_id and cvcc.account_time is null
				        	</otherwise>
				        </choose>
				    </if>
			  	</when>  
	        	<otherwise> <!-- 任务发布上线被驳回时的结算 -->
	        	    UPDATE c_vendor_cost cvcc,c_vendor cv 
	        	    SET cvcc.reality_task_consume = 0,
					    cvcc.reality_plat_consume = 0,
					    cvcc.after_balance = cv.balance + cvcc.task_imprest + cvcc.plat_imprest,
					    cv.balance = cv.balance + cvcc.task_imprest + cvcc.plat_imprest,
					    cvcc.type = 0,account_time = NOW()
						WHERE cvcc.vendor_id = cv.vendor_id  AND cvcc.task_id = #{task_id}
							  and cvcc.task_biz = #{task_biz}
	        	</otherwise>
        	</choose>
		</if>
		
	</update>
	
	<select id="getVendorCostList" parameterType="VendorSearch" resultType="VendorCostBean">
		 SELECT * FROM (SELECT cvc.task_id,cvc.task_name,cvc.reality_task_consume,cvc.reality_plat_consume,
		 	CASE cvc.task_biz 
		 	WHEN 1 THEN (SELECT sm.complete_time FROM s_monitor sm WHERE sm.task_id = cvc.task_id )  
			WHEN 2 THEN (SELECT sm.complete_time FROM s_share_wx sm WHERE sm.task_id = cvc.task_id)  
		 	WHEN 3 THEN (SELECT sm.complete_time FROM s_media sm WHERE sm.task_id = cvc.task_id)  
		 	WHEN 4 THEN (SELECT sm.complete_time FROM s_inspecte sm WHERE sm.task_id = cvc.task_id)  
		 	WHEN 5 THEN (SELECT sm.complete_time FROM s_media sm WHERE sm.task_id = cvc.task_id)  
		 	WHEN 6 THEN (SELECT sm.complete_time FROM s_survey sm WHERE sm.task_id = cvc.task_id) 
		 	END AS create_time
		 FROM c_vendor_cost cvc where cvc.vendor_id = #{vendor_id} AND cvc.type = 1
		 <if test="task_id !=null and task_id !='' ">
		 	AND cvc.task_id = #{task_id}
		 </if>
		 <if test="task_name !=null and task_name !='' ">
		 	AND cvc.task_name LIKE CONCAT("%",#{task_name},"%") 
		 </if>
		 ) A
		 WHERE 1=1 
	  	<if test="create_btime != null and create_btime != ''">
            AND A.create_time &gt;= CONCAT(#{create_btime}, ' 00:00:00')
       	</if>
        <if test="create_etime != null and create_etime != ''">
            AND A.create_time &lt;= CONCAT(#{create_etime}, ' 23:59:59')
        </if>
        ORDER BY A.create_time DESC
		<if test="havePage == 1">
     		LIMIT #{start} , #{rows}
       	</if>
	</select>
	
	<select id="getVendorCostCount" parameterType="VendorSearch" resultType="int">
		 SELECT COUNT(1) FROM (SELECT cvc.task_id,cvc.task_name,cvc.reality_task_consume,cvc.reality_plat_consume,
		 	CASE cvc.task_biz 
		 	WHEN 1 THEN (SELECT sm.complete_time FROM s_monitor sm WHERE sm.task_id = cvc.task_id )  
			WHEN 2 THEN (SELECT sm.complete_time FROM s_share_wx sm WHERE sm.task_id = cvc.task_id)  
		 	WHEN 3 THEN (SELECT sm.complete_time FROM s_media sm WHERE sm.task_id = cvc.task_id)  
		 	WHEN 4 THEN (SELECT sm.complete_time FROM s_inspecte sm WHERE sm.task_id = cvc.task_id)  
		 	WHEN 5 THEN (SELECT sm.complete_time FROM s_media sm WHERE sm.task_id = cvc.task_id)  
		 	WHEN 6 THEN (SELECT sm.complete_time FROM s_survey sm WHERE sm.task_id = cvc.task_id) 
		 	END AS create_time
		 FROM c_vendor_cost cvc where cvc.vendor_id = #{vendor_id} AND cvc.type = 1
		 <if test="task_id !=null and task_id !='' ">
		 	AND cvc.task_id = #{task_id}
		 </if>
		 <if test="task_id !=null and task_id !='' ">
		 	AND cvc.task_name LIKE CONCAT("%",#{task_name},"%") 
		 </if>
		 ) A
		 WHERE 1=1 
	  	<if test="create_btime != null and create_btime != ''">
            AND A.create_time &gt;= CONCAT(#{create_btime}, ' 00:00:00')
       	</if>
        <if test="create_etime != null and create_etime != ''">
            AND A.create_time &lt;= CONCAT(#{create_etime}, ' 23:59:59')
        </if>
	</select>
	
</mapper>